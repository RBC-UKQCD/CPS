/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _CG_ARG_H_RPCGEN
#define _CG_ARG_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE

class VML;
class CgArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	Float mass;
	Float epsilon;
	int max_num_iter;
	Float stop_rsd;
	Float true_rsd;
	enum RitzMatType RitzMatOper;
	enum InverterType Inverter;
	int bicgstab_n;
	   CgArg (  ) ;
};

class VML;
class MdwfArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	struct {
		u_int b5_len;
		Float *b5_val;
	} b5;
	struct {
		u_int c5_len;
		Float *c5_val;
	} c5;
	Float M5;
	CgArg *cg_arg_p;
	struct {
		u_int rsd_vec_len;
		Float *rsd_vec_val;
	} rsd_vec;
	int use_single_precision;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_CgArg (VML *, char *instance, CgArg*);
extern  bool_t vml_MdwfArg (VML *, char *instance, MdwfArg*);

#else /* K&R C */
extern  bool_t vml_CgArg (VML *, char *instance, CgArg*);
extern  bool_t vml_MdwfArg (VML *, char *instance, MdwfArg*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_CG_ARG_H_RPCGEN */
